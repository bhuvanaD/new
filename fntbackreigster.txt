package com.example.frntendback;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;

import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Environment;

import android.provider.MediaStore;
import android.support.annotation.NonNull;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import cn.pedant.SweetAlert.SweetAlertDialog;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.FormBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;


import static android.R.attr.data;

public class Registration extends AppCompatActivity {

    private static final String BASE_URL = "http://10.0.2.2/tcdc/check2.php";

    private OkHttpClient client = new OkHttpClient();

    EditText name, e_mail, mob, pass, gen;

    private String userChoosenTask;

    SweetAlertDialog pDialog;

    private ImageView showimg, selectimg;

    private int REQUEST_CAMERA = 0, SELECT_FILE = 1;

    private static int RESULT_LOAD_IMAGE = 1;

    Button Reg;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_registration);

        selectimg = (ImageView) findViewById(R.id.selectimage);

        showimg = (ImageView) findViewById(R.id.ivImage);

        name = (EditText) findViewById(R.id.full_name);
        e_mail = (EditText) findViewById(R.id.email_address);
        pass = (EditText) findViewById(R.id.create_new_password);
        mob = (EditText) findViewById(R.id.mob_number);
        Reg = (Button) findViewById(R.id.Register);
        gen = (EditText) findViewById(R.id.full_name);

        registrationCli();
        uploadImg();
        setUpLoader();
    }



    public void registrationCli() {

        Reg.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                emptyCheck();

            }
        });


    }

    public final static boolean isValidEmail(CharSequence target) {
        if (target == null) {
            return false;
        } else {
            return android.util.Patterns.EMAIL_ADDRESS.matcher(target).matches();
        }
    }

    public void emptyCheck() {

       if( showimg.getDrawable() != null){


            Toast.makeText(getApplicationContext(), "Please select the picture", Toast.LENGTH_SHORT).show();

        }

      else if (name.getText().toString().equals("")) {

            Toast.makeText(getApplicationContext(), "Please enter User Name", Toast.LENGTH_SHORT).show();

        }
        else if (e_mail.getText().toString().equals("") || !isValidEmail(e_mail.getText().toString())) {
            Toast.makeText(getApplicationContext(), "Please enter valid email", Toast.LENGTH_SHORT).show();
        }
        else if (mob.getText().toString().equals("") || mob.getText().length() < 11) {
            Toast.makeText(getApplicationContext(), "Please enter the mobile number", Toast.LENGTH_SHORT).show();
        }
        else if (gen.getText().toString().equals("")) {
            Toast.makeText(getApplicationContext(), "Please enter the gender", Toast.LENGTH_SHORT).show();
        }
        else if(pass.getText().toString().equals("") || pass.getText().length()<=5 ) {
            Toast.makeText(getApplicationContext(), "Please enter the password", Toast.LENGTH_SHORT).show();
        }



        else {

            String username = name.getText().toString().trim().toLowerCase();
            String email = e_mail.getText().toString();
            String gender = gen.getText().toString();
            String contact = mob.getText().toString();
            String password = pass.getText().toString();

            ConnectionDetector internetcheck = new ConnectionDetector(Registration.this);
            boolean is_active = internetcheck.isConnectingToInternet();

            if(is_active){

                pDialog.show();
                registerUser(username, password,email,contact,gender);
            }else{
                new AlertView().showAlertView(Registration.this,"warning","Alert Message","No Internet Connection");
            }
        }


    }

   /* public void imgSele(ImageView showimg) {

        String showimage = showimg.getText().toString();


        Bitmap bm = ((BitmapDrawable) this.showimg.getDrawable()).getBitmap();

        boolean hasDrawable = (bm != null);
        if (hasDrawable) {

            hasImage(ImageView);

        } else {
            Toast.makeText(Registration.this, "No image selected", Toast.LENGTH_SHORT).show();
        }
    }*/



    private boolean hasImage(@NonNull ImageView view) {
        Drawable drawable = view.getDrawable();
        boolean hasImage = (drawable != null);

        if (hasImage && (drawable instanceof BitmapDrawable)) {
            hasImage = ((BitmapDrawable)drawable).getBitmap() != null;
        }

        return hasImage;
    }


    public void registerUser(String username, String password,String email,String contact,String gender) {

        RequestBody body = new  FormBody.Builder()

                .add("username", username)
                .add("password", password)
                .add("email", email)
                .add("contact", contact)
                .add("gender", gender)
                .build();

        Request request = new Request.Builder().url(BASE_URL).post(body).build();

        Call call = client.newCall(request);

        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {

                //  Log.e(TAG_REGISTER, "Registration error: " + e.getMessage());
                System.out.println("Registration Error" + e.getMessage());


            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                try {
                    String resp = response.body().string();




                    System.out.println("bhu" +resp);

                    if (response.isSuccessful()) {

                                    /*Toast.makeText(getApplicationContext(), "User successfully registered. Try login now!", Toast.LENGTH_LONG).show();
*/
                    } else {

                    }
                } catch (IOException e) {
                    // Log.e(TAG_REGISTER, "Exception caught: ", e);
                    System.out.println("Exception caught" + e.getMessage());
                }
            }
        });


    }

    public void setUpLoader(){
        pDialog = new SweetAlertDialog(this, SweetAlertDialog.PROGRESS_TYPE);
        pDialog.getProgressHelper().setBarColor(Color.GRAY);
        pDialog.getProgressHelper().setBarWidth(5);
        pDialog.setTitleText("Registering");
        pDialog.setCancelable(false);

    }



    
    
    /* camera activity ------------------------------------------------------------------------------------------------------------------*/

    public void uploadImg() {
        selectimg.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectImage();
            }
        });


    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        switch (requestCode) {

            case Utility.MY_PERMISSIONS_REQUEST_READ_EXTERNAL_STORAGE:
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    if(userChoosenTask.equals("Take Photo"))
                        cameraIntent();
                    else if(userChoosenTask.equals("Choose from Library"))
                        galleryIntent();
                } else {
                    //code for deny
                }
                break;
        }
    }

    private void selectImage() {

        final CharSequence[] items = { "Take Photo", "Choose from Gallery",
                "Cancel" };

        AlertDialog.Builder builder = new AlertDialog.Builder(Registration.this);
        builder.setTitle("Add Photo!");
        builder.setItems(items, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int item) {
                boolean result=Utility.checkPermission(Registration.this);

                if (items[item].equals("Take Photo")) {
                    userChoosenTask ="Take Photo";
                    if(result)
                        cameraIntent();

                } else if (items[item].equals("Choose from Library")) {
                    userChoosenTask ="Choose from Gallery";
                    if(result)
                        galleryIntent();

                } else if (items[item].equals("Cancel")) {
                    dialog.dismiss();
                }
            }
        });
        builder.show();
    }

    private void galleryIntent()
    {
        Intent i = new Intent(
                Intent.ACTION_PICK,
                android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);

           startActivityForResult(i, RESULT_LOAD_IMAGE);
    }

    private void cameraIntent()
    {
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        startActivityForResult(intent, REQUEST_CAMERA);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (resultCode == Activity.RESULT_OK && requestCode == RESULT_LOAD_IMAGE) {

            if (requestCode == RESULT_LOAD_IMAGE)
                onSelectFromGalleryResult(data);
            else if (requestCode == REQUEST_CAMERA)
                onCaptureImageResult(data);
        }
    }

    private void onCaptureImageResult(Intent data) {

        Bitmap thumbnail = (Bitmap) data.getExtras().get("data");

        ByteArrayOutputStream bytes = new ByteArrayOutputStream();

        thumbnail.compress(Bitmap.CompressFormat.JPEG, 90, bytes);

        File destination = new File(Environment.getExternalStorageDirectory(),
                System.currentTimeMillis() + ".jpg");

        FileOutputStream fo;
        try {

            destination.createNewFile();

            fo = new FileOutputStream(destination);

            fo.write(bytes.toByteArray());

            fo.close();
        }

        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (IOException e) {
            e.printStackTrace();
        }

        showimg.setImageBitmap(thumbnail);
    }

    @SuppressWarnings("deprecation")
    private void onSelectFromGalleryResult(Intent data) {

        Uri selectedImage = data.getData();

        String[] filePathColumn = { MediaStore.Images.Media.DATA };

        Cursor cursor = getContentResolver().query(selectedImage,
                filePathColumn, null, null, null);
        cursor.moveToFirst();

        int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
        String picturePath = cursor.getString(columnIndex);


        System.out.println("picture path : " + picturePath);
        //  /storage/emulated/0/Pictures/Screenshots/Screenshot_2016-12-29-17-05-57.png

        cursor.close();


     /*   Bitmap bm = BitmapFactory.decodeFile("/path/to/image.jpg");
*/
        Bitmap bitmap = BitmapFactory.decodeResource(getResources(),R.drawable.home);



        ByteArrayOutputStream stream = new ByteArrayOutputStream();

        bitmap.compress(Bitmap.CompressFormat.PNG, 90, stream);
        //compress to which format you want.
        byte [] byte_arr = stream.toByteArray();

        String image_str = Base64.encodeToString(byte_arr, Base64.DEFAULT);

        System.out.println("image_str : " + image_str);

        //: iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAYAAADimHc4AAAABHNCSVQICAgIfAhkiAAABSRJREFU

       showimg.setImageBitmap(BitmapFactory.decodeFile(picturePath));

    }

}



